<?xml version="1.0" encoding="utf-8" ?>
<doc>
  <assembly>
    <name>MoreComplexDataStructures</name>
  </assembly>
  <members>
    <member name="M:MoreComplexDataStructures.IRandomIntegerGenerator.Next(System.Int32)">
      <summary>
        Returns a non-negative random integer that is less than the specified maximum.
      </summary>
      <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to 0.</param>
      <returns>A 32-bit signed integer that is greater than or equal to 0, and less than maxValue; that is, the range of return values ordinarily includes 0 but not maxValue. However, if maxValue equals 0, maxValue is returned.</returns>
    </member>
    <member name="M:MoreComplexDataStructures.IRandomIntegerGenerator.Next(System.Int64)">
      <summary>
        Returns a non-negative random Int64 that is less than the specified maximum.
      </summary>
      <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to 0.</param>
      <returns>A 64-bit signed integer that is greater than or equal to 0, and less than maxValue; that is, the range of return values ordinarily includes 0 but not maxValue. However, if maxValue equals 0, maxValue is returned.</returns>
    </member>
    <member name="M:MoreComplexDataStructures.IBinarySearchTree`1.Clear">
      <summary>
        Removes all items from the tree.
      </summary>
    </member>
    <member name="M:MoreComplexDataStructures.IBinarySearchTree`1.Add(`0)">
      <summary>
        Adds the specified item to the tree.
      </summary>
      <param name="item">The item to add.</param>
      <exception cref="T:System.ArgumentException">The specified item already exists in the tree.</exception>
    </member>
    <member name="M:MoreComplexDataStructures.IBinarySearchTree`1.Remove(`0)">
      <summary>
        Removes the specified item from the tree.
      </summary>
      <param name="item">The item to remove.</param>
      <exception cref="T:System.ArgumentException">The specified item does not exist in the tree.</exception>
    </member>
    <member name="M:MoreComplexDataStructures.IBinarySearchTree`1.Get(`0)">
      <summary>
        Retrieves the specified item from the tree.
      </summary>
      <param name="item">The item to retrieve.</param>
      <returns>The item.</returns>
      <exception cref="T:System.ArgumentException">The specified item does not exist in the tree.</exception>
    </member>
    <member name="M:MoreComplexDataStructures.IBinarySearchTree`1.Contains(`0)">
      <summary>
        Determines whether the tree contains the specified item.
      </summary>
      <param name="item">The item to locate in the tree.</param>
      <returns>True if the tree contains the specified item, otherwise false.</returns>
    </member>
    <member name="M:MoreComplexDataStructures.IBinarySearchTree`1.PreOrderDepthFirstSearch(System.Action{MoreComplexDataStructures.WeightBalancedTreeNode{`0}})">
      <summary>
        Performs a pre-order depth-first search of the tree, invoking the specified action at each node.
      </summary>
      <param name="nodeAction">The action to perform at each node.  Accepts a single parameter which is the current node to perform the action on.</param>
    </member>
    <member name="M:MoreComplexDataStructures.IBinarySearchTree`1.InOrderDepthFirstSearch(System.Action{MoreComplexDataStructures.WeightBalancedTreeNode{`0}})">
      <summary>
        Performs an in-order depth-first search of the tree, invoking the specified action at each node.
      </summary>
      <param name="nodeAction">The action to perform at each node.  Accepts a single parameter which is the current node to perform the action on.</param>
    </member>
    <member name="M:MoreComplexDataStructures.IBinarySearchTree`1.PostOrderDepthFirstSearch(System.Action{MoreComplexDataStructures.WeightBalancedTreeNode{`0}})">
      <summary>
        Performs a post-order depth-first search of the tree, invoking the specified action at each node.
      </summary>
      <param name="nodeAction">The action to perform at each node.  Accepts a single parameter which is the current node to perform the action on.</param>
    </member>
    <member name="M:MoreComplexDataStructures.IBinarySearchTree`1.BreadthFirstSearch(System.Action{MoreComplexDataStructures.WeightBalancedTreeNode{`0}})">
      <summary>
        Performs breadth-first search of the tree, invoking the specified action at each node.
      </summary>
      <param name="nodeAction">The action to perform at each node.  Accepts a single parameter which is the current node to perform the action on.</param>
    </member>
    <member name="P:MoreComplexDataStructures.IBinarySearchTree`1.Count">
      <summary>
        The total number of items stored in the tree.
      </summary>
    </member>
    <member name="P:MoreComplexDataStructures.IBinarySearchTree`1.Min">
      <summary>
        Retrieves the minimum-valued item in the tree.
      </summary>
    </member>
    <member name="P:MoreComplexDataStructures.IBinarySearchTree`1.Max">
      <summary>
        Retrieves the maximum-valued item in the tree.
      </summary>
    </member>
    <member name="M:MoreComplexDataStructures.WeightBalancedTree`1.RotateNodeLeft(MoreComplexDataStructures.WeightBalancedTreeNode{`0})">
      <summary>
        Performs a left-rotation on the specified node.
      </summary>
      <param name="inputNode">The node to perform the rotation on.</param>
    </member>
    <member name="M:MoreComplexDataStructures.WeightBalancedTree`1.RotateNodeRight(MoreComplexDataStructures.WeightBalancedTreeNode{`0})">
      <summary>
        Performs a right-rotation on the specified node.
      </summary>
      <param name="inputNode">The node to perform the rotation on.</param>
    </member>
    <member name="M:MoreComplexDataStructures.WeightBalancedTree`1.ZigZagNodeLeft(MoreComplexDataStructures.WeightBalancedTreeNode{`0})">
      <summary>
        Performs a left zig-zag operation on the specified node.
      </summary>
      <param name="inputNode">The node to perform the zig-zag operation on.</param>
      <exception cref="T:System.InvalidOperationException">The specified node cannot have a left zig-zag operation applied as it is a right child of its parent.</exception>
      <exception cref="T:System.InvalidOperationException">The specified node cannot have a left zig-zag operation applied as its parent is a left child of its grandparent.</exception>
    </member>
    <member name="M:MoreComplexDataStructures.WeightBalancedTree`1.ZigZagNodeRight(MoreComplexDataStructures.WeightBalancedTreeNode{`0})">
      <summary>
        Performs a right zig-zag operation on the specified node.
      </summary>
      <param name="inputNode">The node to perform the zig-zag operation on.</param>
      <exception cref="T:System.InvalidOperationException">The specified node cannot have a right zig-zag operation applied as it is a left child of its parent.</exception>
      <exception cref="T:System.InvalidOperationException">The specified node cannot have a right zig-zag operation applied as its parent is a right child of its grandparent.</exception>
    </member>
  </members>
</doc>
