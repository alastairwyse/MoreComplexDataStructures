<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <AssemblyVersion>1.9.2.0</AssemblyVersion>
    <FileVersion>1.9.2.0</FileVersion>
    <Copyright>Copyright Â© Alastair Wyse 2019</Copyright>
    <PackageProjectUrl>https://github.com/alastairwyse/MoreComplexDataStructures</PackageProjectUrl>
    <PackageLicenseUrl>http://www.apache.org/licenses/LICENSE-2.0</PackageLicenseUrl>
    <Description>MoreComplexDataStructures is a class library containing a collection of data structures (plus related utility classes) more complex than those found in the standard .NET framework.

The project currently contains the following data structures and utility classes...

WeightBalancedTree&lt;T&gt; - A weight-balanced binary search tree
MinHeap&lt;T&gt; - A tree-based min heap
MaxHeap&lt;T&gt; - A tree-based max heap
PriorityQueue&lt;T&gt; - A tree-based double-ended priority queue
Trie&lt;T&gt; - A trie (or prefix tree)
CharacterTrie - A trie which stores characters (with some performance enhancements over Trie&lt;Char&gt;)
WeightedRandomGenerator&lt;T&gt; - A weighted random number (or item) generator
UniqueRandomGenerator - A random number generator guaranteed to always produce unique numbers within a given range
FrequencyTable&lt;T&gt; - A frequency table
LRUCache&lt;TKey, TValue&gt; - A simple least recently used cache
UnflaggedNumberGenerator - Allows the 'flagging' (marking) of numbers in a specified range, and provides methods to identify numbers which were not flagged
LongIntegerStatusStorer - Stores a boolean status for a complete set of long integers
ListRandomizer - Randomizes the elements of a list using the Fisher/Yates/Knuth algorithm</Description>
    <Authors>Alastair Wyse</Authors>
    <Version>1.9.2</Version>
    <PackageTags>data structure weight weighted balanced tree binary search minheap maxheap trie priority queue frequency table long integer int64 random randomize list array unique random generate lru cache</PackageTags>
    <PackageReleaseNotes>WeightBalancedTree implements IEnumerable&lt;T&gt;.  PriorityQueue implements IEnumerable&lt;KeyValuePair&lt;Double, T&gt;&gt;.</PackageReleaseNotes>
    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
    <ApplicationIcon />
    <OutputType>Library</OutputType>
    <StartupObject />
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DocumentationFile>bin\Debug\MoreComplexDataStructures.xml</DocumentationFile>
    <OutputPath></OutputPath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <OutputPath />
    <DocumentationFile>bin\Debug\MoreComplexDataStructures.xml</DocumentationFile>
  </PropertyGroup>

</Project>
